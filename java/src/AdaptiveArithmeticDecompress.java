/* 
 * Reference arithmetic coding
 * Copyright (c) Project Nayuki
 * 
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://github.com/nayuki/Reference-arithmetic-coding
 */

import inputstreams.InputStreamFactory;

import java.io.*;


/**
 * Decompression application using adaptive arithmetic coding.
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile</p>
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.</p>
 */
public class AdaptiveArithmeticDecompress extends ByteTransformer {

	public static void main(String[] args) throws IOException {
		new AdaptiveArithmeticDecompress().commandLineMain(args);
	}

	@Override
	public void transformStream(InputStreamFactory inputStreamFactory, OutputStream out) throws IOException {
		try (BitInputStream in = new BitInputStream(inputStreamFactory.getStream());
				out) {
			decompress(in, out);
		}
	}
	
	
	// To allow unit testing, this method is package-private instead of private.
	static void decompress(BitInputStream in, OutputStream out) throws IOException {
		FlatFrequencyTable initFreqs = new FlatFrequencyTable(257);
		FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
		ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
		while (true) {
			// Decode and write one byte
			int symbol = dec.read(freqs);
			if (symbol == 256)  // EOF symbol
				break;
			out.write(symbol);
			freqs.increment(symbol);
		}
	}
	
}
